/*
 Copyright (c) 2012 Centre National de la Recherche Scientifique (CNRS).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

options {
  LOOKAHEAD = 1;
  FORCE_LA_CHECK = false;
  STATIC = false;
  MULTI = true;
  UNICODE_INPUT = true;
  JDK_VERSION = "1.5";
}

PARSER_BEGIN(CIMIFilterParser)

package eu.stratuslab.cimi;

import org.joda.time.DateTime;

public class CIMIFilterParser { 

}

PARSER_END(CIMIFilterParser)

SKIP : /* Whitespace. */
{
  < (" " | "\t" | "\f" | "\n" | "\r") >
}

TOKEN : /* Operators and punctuation. */
{
  <LPAREN: "(">
  |
  <RPAREN: ")">
  |
  <GT: ">">
  |
  <LT: "<">
  |
  <EQ: "=">
  |
  <NE: "!=">
  |
  <GE: ">=">
  |
  <LE: "<=">
  |
  <OR: "or">
  |
  <AND: "and">
}

TOKEN : /* Literals. */
{
  < TRUE: "true">
  |
  < FALSE: "false">
  |
  < DECIMAL_LITERAL: (["0"-"9"])+ >
  |
  < DATE_LITERAL: (["0"-"9", "T", "Z", ":", ".", "+", "-"])+ >
  |
  < SINGLE_QUOTED_STRING: "'" ( "\\'" | "\\\\" | (~["'"]) )* "'" >
  |
  < DOUBLE_QUOTED_STRING: "\"" ( "\\\"" | "\\\\" | (~["\""]) )* "\"" >
}


TOKEN : /* Reserved words and operators. */
{
  <PROPERTY_PREFIX: "property[" >
  | 
  <PROPERTY_SUFFIX: "]" >
}

TOKEN : /* Default identifiers. */
{
  <IDENTIFIER: [ "a"-"z", "A"-"Z", "_" ] ( [ "a"-"z", "A"-"Z", "_", "0"-"9" ] )* >
}

/* If nothing else matches in the lexer, then there is an error.
   Match the character where a standard token cannot be found. */
<*> TOKEN:
{
  <ERROR: ~[] >
}

/*************************************************************************
End-of-file processing.
*************************************************************************/
void endOfFile() #void :
{ }
{
  token=<EOF>
  { if (token.image != null && (! "".equals(token.image))) throw new ParseException(token.image); }
}

/*************************************************************************
Literals.  
*************************************************************************/
String stringValue() #StringValue :
{ Token t; }
{
  ( t=<SINGLE_QUOTED_STRING> )
  {
    String v = t.image.replaceAll("\\\\(\\\\|')", "$1");
    v = v.substring(1,v.length()-1);
    jjtThis.jjtSetValue(v);
    return v;
  }
  |
  ( t=<DOUBLE_QUOTED_STRING> )
  {
    String s = t.image.replaceAll("\\\\(\\\\|\")", "$1");
    s = s.substring(1,s.length()-1);
    jjtThis.jjtSetValue(s);
    return s;
  }
}

Integer intValue() #IntValue :
{ Token t; }
{
  ( t=<DECIMAL_LITERAL> )
  {
    try {
      Integer i = Integer.valueOf(t.image);
      jjtThis.jjtSetValue(i);
      return i;
    } catch (NumberFormatException consumed) {
      String msg = String.format("invalid integer at [%d, %d]", t.beginLine, t.beginColumn);
      throw new ParseException(msg);
    }
  }
}

DateTime dateValue() #DateValue :
{ Token t; }
{
  ( t=<DATE_LITERAL> )
  {
    try {
      DateTime instant = DateTime.parse(t.image);
      jjtThis.jjtSetValue(instant);
      return instant;
    } catch (Exception e) {
      String msg = String.format("invalid date/time at [%d, %d]", t.beginLine, t.beginColumn);
      throw new ParseException(msg);      
    }
  }
}

Boolean boolValue() #BoolValue :
{ Token t; }
{
  ( t=<TRUE> | t=<FALSE> )
  {
    Boolean b = Boolean.valueOf(t.image);
    jjtThis.jjtSetValue(b);
    return b;
  }
}

/*************************************************************************
Expressions.
*************************************************************************/

ASTFilter filter() #Filter : 
{ }
{
  logicalOrExpression()
  endOfFile()
  {
    return(jjtThis);
  }
}

void logicalOrExpression() #logicalOrExpression(>1) : 
{ }
{
  logicalAndExpression() ( <OR> logicalAndExpression() #logicalOrExpression(2) )*
}

void logicalAndExpression() #logicalAndExpression(>1) : 
{ }
{
  comp() ( <AND> comp() #logicalAndExpression(2) )*
}

void comp() #Comp(>1) : 
{ }
{
  ( attribute() op() value() )
  |
  ( value() op() attribute() )
  |
  ( <LPAREN> logicalOrExpression() <RPAREN> )
}

void attribute() #void :
{ }
{
  attributeName()
  |
  propExpr()
}

void attributeName() #AttributeName :
{ Token t; }
{
  t=<IDENTIFIER>
  {
    jjtThis.jjtSetValue(t.image);
  }

}

void propExpr() #PropExpr :
{ String s;}
{
  <PROPERTY_PREFIX> s=stringValue() <PROPERTY_SUFFIX>
  {
    jjtThis.jjtSetValue(s);
  }
}

void op() #Op :
{ Token t; }
{
  (t=<LT> | t=<LE> | t=<EQ> | t=<GE> | t=<GT> | t=<NE>)
  {
    String s = t.image;
    jjtThis.jjtSetValue("!=".equals(s) ? "not=" : s);
  }
}

void value() #void :
{ }
{
  intValue()
  |
  dateValue()
  |
  stringValue()
  |
  boolValue()
}
