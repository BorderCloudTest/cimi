#!/usr/bin/env bash
#
# This file is a modified version of the JETTY init.d script, released
# under the eclipse public license.
#
# To get the service to restart correctly on reboot, uncomment below (3 lines):
# ========================
# chkconfig: 3 99 99
# description: CIMI cloud management interface
# processname: cimi
# ========================

# Configuration files
#
# /etc/default/cimi or $HOME/etc/default/cimi
#   If it exists, this is read at the start of script. You may set any
#   environmental variables that you wish to change from the defaults.
#
# /etc/stratuslab/couchbase.cfg
#   If this file is found, then the values within it will be used to
#   establish the connection to the Couchbase database.  If this file
#   does not exist, then the standard defaults will be used.
#
# Configuration variables
#
# JAVA
#   Command to invoke Java. If not set, java (from the PATH) will be used.
#
# JAVA_OPTIONS
#   Extra options to pass to the JVM
#
# CIMI_HOME
#   Where the cimi software is installed.  If not set, then this will
#   default to /opt/stratuslab/cimi.
#
# CIMI_PORT
#   Override the default port for this service.  This will also require
#   manual changes to the nginx configuration.
#
# CIMI_CB_CFG
#   Location of the Couchbase configuration file for initializing the
#   connection to the database.
#
# CIMI_RUN
#   Where the cimi.pid file should be stored. It defaults to the
#   first available of /var/run, /usr/var/run, and CIMI_HOME.
#
# CIMI_PID
#   The CIMI PID file, defaults to $CIMI_RUN/cimi.pid
#
# CIMI_USER
#   If set, then this user will be used to run the server.  If running
#   as root, this defaults to "slcimi".  If running as a normal user,
#   then the normal user's account will be used.
#

usage() {
    echo "Usage: ${0##*/} {start|stop|run|restart|check|status|supervise} "
    exit 1
}

[ $# -gt 0 ] || usage


##################################################
# Some utility functions
##################################################
findDirectory() {
  local L OP=$1
  shift
  for L in "$@"; do
    [ "$OP" "$L" ] || continue
    printf %s "$L"
    break
  done
}

running() {
  local PID=$(cat "$1" 2>/dev/null) || return 1
  kill -0 "$PID" 2>/dev/null
}


##################################################
# Pull off options and get the action
##################################################
while [[ $1 = -* ]]; do
  shift
done
ACTION=$1
shift

##################################################
# Read startup configuration files
##################################################
ETC=/etc
if [ $UID != 0 ]; then
  ETC=$HOME/etc
fi

CONFIG=$ETC/default/cimi
if [ -f "$CONFIG" ]; then
  source "$CONFIG"
fi


##################################################
# Set CIMI_HOME to default if not already set
##################################################
if [ -z "$CIMI_HOME" ]; then
  CIMI_HOME=/opt/stratuslab/cimi
fi

if [ ! -d "$CIMI_HOME" ]; then
  echo "ERROR: CIMI_HOME=${CIMI_HOME} is not an existing directory"
  exit 1
fi


##################################################
# Switch to the home directory.
##################################################
cd "$CIMI_HOME"
CIMI_HOME=$PWD


##################################################
# Set the value for the Couchbase configuration
##################################################
if [ -z "$CIMI_CB_CFG" ]; then
  CIMI_CB_CFG=/etc/stratuslab/couchbase.cfg
fi


#####################################################
# Set location and name of PID file
#####################################################
if [ -z "$CIMI_RUN" ]; then
  CIMI_RUN=$(findDirectory -w /var/run /usr/var/run $CIMI_HOME)
fi

if [ -z "$CIMI_PID" ]; then
  CIMI_PID="$CIMI_RUN/cimi.pid"
fi


##################################################
# Verify that java executable is available
##################################################
if [ -z "$JAVA" ]; then
  JAVA=$(which java)
fi

if [ -z "$JAVA" ]; then
  echo "Java executable cannot be found.  Put in path or set JAVA variable." 2>&2
  exit 1
fi


#####################################################
# See if CIMI_PORT is defined
#####################################################
if [ -z "$CIMI_PORT" ]; then
  CIMI_PORT=9200
fi


#####################################################
# Define the command for starting the service
#####################################################
CIMI_JAR=$CIMI_HOME/lib/cimi.jar
[ ! -f "$CIMI_JAR" ]; then
  echo "CIMI jar file (${CIMI_JAR}) not found." 2>&2
  exit 1
fi

RUN_ARGS=(${JAVA_OPTIONS[@]} -jar "$CIMI_JAR" $CIMI_PORT $CIMI_CB_CFG)
RUN_CMD=("$JAVA" ${RUN_ARGS[@]})


##################################################
# Do the action
##################################################
case "$ACTION" in
  start)
    echo -n "Starting CIMI: "

    if [ $UID -eq 0 ] && type start-stop-daemon > /dev/null 2>&1; then
      unset CH_USER
      if [ -n "$CIMI_USER" ]; then
        CH_USER="-c$CIMI_USER"
      fi

      start-stop-daemon -S -p"$CIMI_PID" $CH_USER -d"$CIMI_HOME" -b -m -a "$JAVA" -- "${RUN_ARGS[@]}" --daemon

    else

      if [ -f "$CIMI_PID" ]; then
        if running $CIMI_PID; then
          echo "Already Running!"
          exit 1
        else
          # dead pid file - remove
          rm -f "$CIMI_PID"
        fi
      fi

      if [ "$CIMI_USER" ]; then
        touch "$CIMI_PID"
        chown "$CIMI_USER" "$CIMI_PID"
        # FIXME: Broken solution: wordsplitting, pathname expansion, arbitrary command execution, etc.
        su - "$CIMI_USER" -c "
          exec ${RUN_CMD[*]} --daemon &
          disown \$!
          echo \$! > '$CIMI_PID'"
      else
        "${RUN_CMD[@]}" &
        disown $!
        echo $! > "$CIMI_PID"
      fi

    fi

    ;;

  stop)
    echo -n "Stopping CIMI: "
    if [ $UID -eq 0 ] && type start-stop-daemon > /dev/null 2>&1; then
      start-stop-daemon -K -p"$CIMI_PID" -d"$CIMI_HOME" -a "$JAVA" -s HUP

      TIMEOUT=30
      while running "$CIMI_PID"; do
        if (( TIMEOUT-- == 0 )); then
          start-stop-daemon -K -p"$CIMI_PID" -d"$CIMI_HOME" -a "$JAVA" -s KILL
        fi

        sleep 1
      done

      rm -f "$CIMI_PID"
      echo OK
    else
      PID=$(cat "$CIMI_PID" 2>/dev/null)
      kill "$PID" 2>/dev/null

      TIMEOUT=30
      while running $CIMI_PID; do
        if (( TIMEOUT-- == 0 )); then
          kill -KILL "$PID" 2>/dev/null
        fi

        sleep 1
      done

      rm -f "$CIMI_PID"
      echo OK
    fi

    ;;

  restart)
    CIMI_SH=$0
    if [ ! -f $CIMI_SH ]; then
      echo "$CIMI_HOME/bin/CIMI.sh does not exist."
      exit 1
    fi

    "$CIMI_SH" stop "$@"
    "$CIMI_SH" start "$@"

    ;;

  supervise)
    #
    # Under control of daemontools supervise monitor which
    # handles restarts and shutdowns via the svc program.
    #
    exec "${RUN_CMD[@]}"

    ;;

  run|demo)
    echo "Running CIMI: "

    if [ -f "$CIMI_PID" ]; then
      if running "$CIMI_PID"; then
        echo "Already Running!"
        exit 1
      else
        # dead pid file - remove
        rm -f "$CIMI_PID"
      fi
    fi

    exec "${RUN_CMD[@]}"
    ;;

  check|status)
    echo "Checking arguments to CIMI: "
    echo "CIMI_HOME    =  $CIMI_HOME"
    echo "CIMI_CONF    =  $CIMI_CONF"
    echo "CIMI_ARGS    =  $CIMI_ARGS"
    echo "CIMI_PID     =  $CIMI_PID"
    echo "CLASSPATH    =  $CLASSPATH"
    echo "JAVA         =  $JAVA"
    echo "JAVA_OPTIONS =  ${JAVA_OPTIONS[*]}"
    echo "RUN_CMD      =  ${RUN_CMD[*]}"
    echo

    if [ -f "$CIMI_PID" ]; then
      echo "CIMI running pid=$(< "$CIMI_PID")"
      exit 0
    fi
    exit 1

    ;;

  *)
    usage

    ;;
esac

exit 0
